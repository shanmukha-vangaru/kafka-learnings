spring:
  profiles:
    active: "confluent-cloud"
  config:
    import: optional:file:.env[.properties]
  jpa:
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  datasource:
    url: jdbc:postgresql://localhost:5436/kafka_db
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
  kafka:
    streams:
      application-id: spring-boot-kafka
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        schema.registry.url: http://localhost:8081
        allow.auto.create.topics: false
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        specific.avro.reader: true
        allow.auto.create.topics: false
        schema.registry.url: http://localhost:8081
    consumers:
      user-clicks:
        group.id: user-clicks-0
        topics: user-clicks
      user-purchases:
        group.id: user-purchases-0
        topics: user-purchases
      user-searches:
        group.id: user-searches-0
        topics: user-searches
      user-reviews:
        group.id: user-reviews-0
        topics: user-reviews
      user-logins:
        group.id: user-logins-0
        topics: user-logins

---

spring:
  config:
    activate:
      on-profile: confluent-cloud

  kafka:
    bootstrap-servers: ${BOOTSTRAP_SERVERS}
    topics:
      replication-factor: 3
    properties:
      sasl:
        mechanism: PLAIN
        jaas.config: ${JASS_CONFIG}
      security.protocol: SASL_SSL
      basic:
        auth:
          credentials.source: USER_INFO
          user.info: ${USER_INFO}
    producer:
      properties:
        schema.registry.url: ${SCHEMA_REGISTRY_URL}
    consumer:
      properties:
        schema.registry.url: ${SCHEMA_REGISTRY_URL}